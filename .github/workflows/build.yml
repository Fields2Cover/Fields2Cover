name: Build and test

on:
  push:
  pull_request:
  release:

jobs:
  build:
    name: "GDAL ${{ matrix.gdal }}, g++ ${{matrix.gcc}}, swig ${{matrix.swig}}, shared ${{matrix.shared}}, ${{matrix.build_type}}"
    runs-on: ubuntu-latest
    container: "osgeo/gdal:ubuntu-full-${{ matrix.gdal }}"
    strategy:
      fail-fast: false
      matrix:
        gcc: [7, 8, 9, 10, 11, 12]
        gdal: ["3.0.2", "3.1.3", "3.2.3", "3.3.3", "3.4.3", "3.5.3", "3.6.2"]
        swig: ["v4.0.0", "v4.0.1", "v4.0.2", "v4.1.0", "v4.1.1"]
        shared: ["ON"]
        generators: ["Unix Makefiles"]
        build_type: ["Release"]
        exclude:
          - gcc: 7
            gdal: "3.6.2"
          - gcc: 8
            gdal: "3.6.2"
          - gcc: 9
            gdal: "3.0.2"
          - gcc: 10
            gdal: "3.0.2"
          - gcc: 11
            gdal: "3.0.2"
          - gcc: 11
            gdal: "3.1.3"
          - gcc: 11
            gdal: "3.2.3"
          - gcc: 11
            gdal: "3.3.3"
          - gcc: 11
            gdal: "3.4.3"
          - gcc: 11
            gdal: "3.5.3"
          - gcc: 12
            gdal: "3.0.2"
          - gcc: 12
            gdal: "3.1.3"
          - gcc: 12
            gdal: "3.2.3"
          - gcc: 12
            gdal: "3.3.3"
          - gcc: 12
            gdal: "3.4.3"
          - gcc: 12
            gdal: "3.5.3"
        include:
          - gcc: 12
            gdal: "3.6.2"
            swig: "v4.1.1"
            shared: "OFF"
            generators: "Unix Makefiles"
            build_type: "Release"
          - gcc: 12
            gdal: "3.6.2"
            swig: "v4.1.1"
            shared: "ON"
            generators: "Unix Makefiles"
            build_type: "Debug"


    steps:
      - uses: actions/checkout@v3
      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}

      - uses: lukka/get-cmake@latest

      - name: Ubuntu system dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update -qq
          apt-get install -y --no-install-recommends ca-certificates
          apt-get install -y --no-install-recommends build-essential doxygen g++-${{ matrix.gcc }} gcc-${{ matrix.gcc }} git lcov libboost-dev libeigen3-dev libgtest-dev libpython3-dev libtbb-dev python3 python3-matplotlib python3-pip python3-pytest python3-tk
          python3 -m pip install gcovr setuptools

          # Solve issue with matplotlib
          python3 -c "import matplotlib"
          echo "backend: Agg" > ~/.config/matplotlib/matplotlibrc

          # Install Gtest
          cd /usr/src/gtest
          cmake CMakeLists.txt
          make
          cp *.a /usr/lib/ 2>\dev\null || :
          cp lib/*.a /usr/lib/ 2>\dev\null || :
          ln -s /usr/lib/libgtest.a /usr/local/lib/libgtest.a
          ln -s /usr/lib/libgtest_main.a /usr/local/lib/libgtest_main.a

          # Install swig
          apt-get install -y --no-install-recommends autoconf automake autotools-dev bison libpcre3 libpcre3-dev libpcre2-dev
          cd /
          mkdir folder_to_compile_swig
          cd folder_to_compile_swig
          git clone --depth 1 --branch ${{ matrix.swig }} https://github.com/swig/swig.git
          cd swig
          ./autogen.sh
          ./configure
          make -j2
          make install

      - name: Configure GDAL
        shell: bash
        run: |
          mkdir -p /usr/include/new_gdal
          cp -r /usr/include/gdal* /usr/include/new_gdal/
          cp /usr/include/ogr* /usr/include/new_gdal/
          cp /usr/include/cpl* /usr/include/new_gdal/
          mv /usr/include/new_gdal/ /usr/include/gdal/


      - name: Configure
        working-directory: ${{github.workspace}}
        shell: bash
        run: |
          mkdir build
          mkdir instdir
          cd build
          cmake \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -G "${{matrix.generators}}" \
            -D CMAKE_C_COMPILER=gcc-${{ matrix.gcc }} \
            -D CMAKE_CXX_COMPILER=g++-${{ matrix.gcc }} \
            -DCMAKE_INSTALL_PREFIX:PATH=../instdir  \
            -DBUILD_PYTHON=ON   \
            -DALLOW_PARALLELIZATION=ON  \
            -DBUILD_TUTORIALS=OFF \
            -DBUILD_TESTS=ON   \
            -DBUILD_DOC=OFF \
            -DBUILD_SHARED_LIBS={{ matrix.shared }} \
            ..

      - name: Build
        working-directory: ${{github.workspace}}/build
        run: make -j2

      - name: Install Strip
        working-directory: ${{github.workspace}}/build
        run: |
          export LC_CTYPE=en_US.UTF-8
          export LANG=en_US.UTF-8
          export LC_ALL=C.UTF-8
          make install

      - name: Test C++
        working-directory: ${{github.workspace}}/build
        run: make check

      - name: Test Python
        working-directory: ${{github.workspace}}
        run: pytest-3 tests/python/

      - name: Test C++ Code Cov
        working-directory: ${{github.workspace}}
        if: ${{ matrix.build_type == 'Debug'}}
        run: gcovr --gcov-executable gcov-12 -p -r . --exclude-function-lines --exclude-unreachable-branches --exclude-throw-branches -f src -f include  --cobertura coverage.xml


      - name: Upload coverage reports to Coveralls
        if: ${{ matrix.build_type == 'Debug'}}
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: coverage.xml







