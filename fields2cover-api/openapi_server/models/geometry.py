from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.geo_json_object import GeoJsonObject
from openapi_server.models.geometry_all_of_coordinates import GeometryAllOfCoordinates
from openapi_server import util

from openapi_server.models.geo_json_object import GeoJsonObject  # noqa: E501
from openapi_server.models.geometry_all_of_coordinates import GeometryAllOfCoordinates  # noqa: E501

class Geometry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, bbox=None, coordinates=None):  # noqa: E501
        """Geometry - a model defined in OpenAPI

        :param type: The type of this Geometry.  # noqa: E501
        :type type: str
        :param bbox: The bbox of this Geometry.  # noqa: E501
        :type bbox: List[float]
        :param coordinates: The coordinates of this Geometry.  # noqa: E501
        :type coordinates: GeometryAllOfCoordinates
        """
        self.openapi_types = {
            'type': str,
            'bbox': List[float],
            'coordinates': GeometryAllOfCoordinates
        }

        self.attribute_map = {
            'type': 'type',
            'bbox': 'bbox',
            'coordinates': 'coordinates'
        }

        self._type = type
        self._bbox = bbox
        self._coordinates = coordinates

    @classmethod
    def from_dict(cls, dikt) -> 'Geometry':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Geometry of this Geometry.  # noqa: E501
        :rtype: Geometry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this Geometry.


        :return: The type of this Geometry.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Geometry.


        :param type: The type of this Geometry.
        :type type: str
        """
        allowed_values = ["Point", "MultiPoint", "LineString", "MultiLineString", "Polygon", "MultiPolygon", "GeometryCollection"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def bbox(self) -> List[float]:
        """Gets the bbox of this Geometry.

        A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the more northeasterly point. The axes order of a bbox follows the axes order of geometries.   # noqa: E501

        :return: The bbox of this Geometry.
        :rtype: List[float]
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox: List[float]):
        """Sets the bbox of this Geometry.

        A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the more northeasterly point. The axes order of a bbox follows the axes order of geometries.   # noqa: E501

        :param bbox: The bbox of this Geometry.
        :type bbox: List[float]
        """

        self._bbox = bbox

    @property
    def coordinates(self) -> GeometryAllOfCoordinates:
        """Gets the coordinates of this Geometry.


        :return: The coordinates of this Geometry.
        :rtype: GeometryAllOfCoordinates
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates: GeometryAllOfCoordinates):
        """Sets the coordinates of this Geometry.


        :param coordinates: The coordinates of this Geometry.
        :type coordinates: GeometryAllOfCoordinates
        """

        self._coordinates = coordinates
