from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.geometry_element import GeometryElement
from openapi_server import util

from openapi_server.models.geometry_element import GeometryElement  # noqa: E501

class Point(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, bbox=None, coordinates=None):  # noqa: E501
        """Point - a model defined in OpenAPI

        :param type: The type of this Point.  # noqa: E501
        :type type: str
        :param bbox: The bbox of this Point.  # noqa: E501
        :type bbox: List[float]
        :param coordinates: The coordinates of this Point.  # noqa: E501
        :type coordinates: List[float]
        """
        self.openapi_types = {
            'type': str,
            'bbox': List[float],
            'coordinates': List[float]
        }

        self.attribute_map = {
            'type': 'type',
            'bbox': 'bbox',
            'coordinates': 'coordinates'
        }

        self._type = type
        self._bbox = bbox
        self._coordinates = coordinates

    @classmethod
    def from_dict(cls, dikt) -> 'Point':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Point of this Point.  # noqa: E501
        :rtype: Point
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this Point.


        :return: The type of this Point.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Point.


        :param type: The type of this Point.
        :type type: str
        """
        allowed_values = ["Point"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def bbox(self) -> List[float]:
        """Gets the bbox of this Point.

        A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the more northeasterly point. The axes order of a bbox follows the axes order of geometries.   # noqa: E501

        :return: The bbox of this Point.
        :rtype: List[float]
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox: List[float]):
        """Sets the bbox of this Point.

        A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the more northeasterly point. The axes order of a bbox follows the axes order of geometries.   # noqa: E501

        :param bbox: The bbox of this Point.
        :type bbox: List[float]
        """

        self._bbox = bbox

    @property
    def coordinates(self) -> List[float]:
        """Gets the coordinates of this Point.

        GeoJSon fundamental geometry construct. A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element. Implementations SHOULD NOT extend positions beyond three elements because the semantics of extra elements are unspecified and ambiguous. Historically, some implementations have used a fourth element to carry a linear referencing measure (sometimes denoted as \"M\") or a numerical timestamp, but in most situations a parser will not be able to properly interpret these values. The interpretation and meaning of additional elements is beyond the scope of this specification, and additional elements MAY be ignored by parsers.   # noqa: E501

        :return: The coordinates of this Point.
        :rtype: List[float]
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates: List[float]):
        """Sets the coordinates of this Point.

        GeoJSon fundamental geometry construct. A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element. Implementations SHOULD NOT extend positions beyond three elements because the semantics of extra elements are unspecified and ambiguous. Historically, some implementations have used a fourth element to carry a linear referencing measure (sometimes denoted as \"M\") or a numerical timestamp, but in most situations a parser will not be able to properly interpret these values. The interpretation and meaning of additional elements is beyond the scope of this specification, and additional elements MAY be ignored by parsers.   # noqa: E501

        :param coordinates: The coordinates of this Point.
        :type coordinates: List[float]
        """
        if coordinates is None:
            raise ValueError("Invalid value for `coordinates`, must not be `None`")  # noqa: E501
        if coordinates is not None and len(coordinates) > 3:
            raise ValueError("Invalid value for `coordinates`, number of items must be less than or equal to `3`")  # noqa: E501
        if coordinates is not None and len(coordinates) < 2:
            raise ValueError("Invalid value for `coordinates`, number of items must be greater than or equal to `2`")  # noqa: E501

        self._coordinates = coordinates
