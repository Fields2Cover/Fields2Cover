from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class GeneratePathSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, robot_width=None, robot_length=None, headland_width=None, sorter_algorithm=None):  # noqa: E501
        """GeneratePathSettings - a model defined in OpenAPI

        :param robot_width: The robot_width of this GeneratePathSettings.  # noqa: E501
        :type robot_width: float
        :param robot_length: The robot_length of this GeneratePathSettings.  # noqa: E501
        :type robot_length: float
        :param headland_width: The headland_width of this GeneratePathSettings.  # noqa: E501
        :type headland_width: float
        :param sorter_algorithm: The sorter_algorithm of this GeneratePathSettings.  # noqa: E501
        :type sorter_algorithm: str
        """
        self.openapi_types = {
            'robot_width': float,
            'robot_length': float,
            'headland_width': float,
            'sorter_algorithm': str
        }

        self.attribute_map = {
            'robot_width': 'robotWidth',
            'robot_length': 'robotLength',
            'headland_width': 'headlandWidth',
            'sorter_algorithm': 'sorterAlgorithm'
        }

        self._robot_width = robot_width
        self._robot_length = robot_length
        self._headland_width = headland_width
        self._sorter_algorithm = sorter_algorithm

    @classmethod
    def from_dict(cls, dikt) -> 'GeneratePathSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The generatePath_settings of this GeneratePathSettings.  # noqa: E501
        :rtype: GeneratePathSettings
        """
        return util.deserialize_model(dikt, cls)

    @property
    def robot_width(self) -> float:
        """Gets the robot_width of this GeneratePathSettings.

        Width of the robot  # noqa: E501

        :return: The robot_width of this GeneratePathSettings.
        :rtype: float
        """
        return self._robot_width

    @robot_width.setter
    def robot_width(self, robot_width: float):
        """Sets the robot_width of this GeneratePathSettings.

        Width of the robot  # noqa: E501

        :param robot_width: The robot_width of this GeneratePathSettings.
        :type robot_width: float
        """

        self._robot_width = robot_width

    @property
    def robot_length(self) -> float:
        """Gets the robot_length of this GeneratePathSettings.

        Length of the robot  # noqa: E501

        :return: The robot_length of this GeneratePathSettings.
        :rtype: float
        """
        return self._robot_length

    @robot_length.setter
    def robot_length(self, robot_length: float):
        """Sets the robot_length of this GeneratePathSettings.

        Length of the robot  # noqa: E501

        :param robot_length: The robot_length of this GeneratePathSettings.
        :type robot_length: float
        """

        self._robot_length = robot_length

    @property
    def headland_width(self) -> float:
        """Gets the headland_width of this GeneratePathSettings.

        Width of the headland  # noqa: E501

        :return: The headland_width of this GeneratePathSettings.
        :rtype: float
        """
        return self._headland_width

    @headland_width.setter
    def headland_width(self, headland_width: float):
        """Sets the headland_width of this GeneratePathSettings.

        Width of the headland  # noqa: E501

        :param headland_width: The headland_width of this GeneratePathSettings.
        :type headland_width: float
        """

        self._headland_width = headland_width

    @property
    def sorter_algorithm(self) -> str:
        """Gets the sorter_algorithm of this GeneratePathSettings.

        Algorithm to sort the swaths  # noqa: E501

        :return: The sorter_algorithm of this GeneratePathSettings.
        :rtype: str
        """
        return self._sorter_algorithm

    @sorter_algorithm.setter
    def sorter_algorithm(self, sorter_algorithm: str):
        """Sets the sorter_algorithm of this GeneratePathSettings.

        Algorithm to sort the swaths  # noqa: E501

        :param sorter_algorithm: The sorter_algorithm of this GeneratePathSettings.
        :type sorter_algorithm: str
        """
        allowed_values = ["snake", "boustrophedon"]  # noqa: E501
        if sorter_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `sorter_algorithm` ({0}), must be one of {1}"
                .format(sorter_algorithm, allowed_values)
            )

        self._sorter_algorithm = sorter_algorithm
