from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class RobotSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, width=None, cov_width=None, max_curv=None, max_diff_curv=None):  # noqa: E501
        """RobotSettings - a model defined in OpenAPI

        :param width: The width of this RobotSettings.  # noqa: E501
        :type width: float
        :param cov_width: The cov_width of this RobotSettings.  # noqa: E501
        :type cov_width: float
        :param max_curv: The max_curv of this RobotSettings.  # noqa: E501
        :type max_curv: float
        :param max_diff_curv: The max_diff_curv of this RobotSettings.  # noqa: E501
        :type max_diff_curv: float
        """
        self.openapi_types = {
            'width': float,
            'cov_width': float,
            'max_curv': float,
            'max_diff_curv': float
        }

        self.attribute_map = {
            'width': 'width',
            'cov_width': 'cov_width',
            'max_curv': 'max_curv',
            'max_diff_curv': 'max_diff_curv'
        }

        self._width = width
        self._cov_width = cov_width
        self._max_curv = max_curv
        self._max_diff_curv = max_diff_curv

    @classmethod
    def from_dict(cls, dikt) -> 'RobotSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Robot_Settings of this RobotSettings.  # noqa: E501
        :rtype: RobotSettings
        """
        return util.deserialize_model(dikt, cls)

    @property
    def width(self) -> float:
        """Gets the width of this RobotSettings.

        Width of the robot  # noqa: E501

        :return: The width of this RobotSettings.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width: float):
        """Sets the width of this RobotSettings.

        Width of the robot  # noqa: E501

        :param width: The width of this RobotSettings.
        :type width: float
        """

        self._width = width

    @property
    def cov_width(self) -> float:
        """Gets the cov_width of this RobotSettings.

        Width of the headland  # noqa: E501

        :return: The cov_width of this RobotSettings.
        :rtype: float
        """
        return self._cov_width

    @cov_width.setter
    def cov_width(self, cov_width: float):
        """Sets the cov_width of this RobotSettings.

        Width of the headland  # noqa: E501

        :param cov_width: The cov_width of this RobotSettings.
        :type cov_width: float
        """

        self._cov_width = cov_width

    @property
    def max_curv(self) -> float:
        """Gets the max_curv of this RobotSettings.

        Maximum curvature  # noqa: E501

        :return: The max_curv of this RobotSettings.
        :rtype: float
        """
        return self._max_curv

    @max_curv.setter
    def max_curv(self, max_curv: float):
        """Sets the max_curv of this RobotSettings.

        Maximum curvature  # noqa: E501

        :param max_curv: The max_curv of this RobotSettings.
        :type max_curv: float
        """

        self._max_curv = max_curv

    @property
    def max_diff_curv(self) -> float:
        """Gets the max_diff_curv of this RobotSettings.

        Maximum difference in curvature  # noqa: E501

        :return: The max_diff_curv of this RobotSettings.
        :rtype: float
        """
        return self._max_diff_curv

    @max_diff_curv.setter
    def max_diff_curv(self, max_diff_curv: float):
        """Sets the max_diff_curv of this RobotSettings.

        Maximum difference in curvature  # noqa: E501

        :param max_diff_curv: The max_diff_curv of this RobotSettings.
        :type max_diff_curv: float
        """

        self._max_diff_curv = max_diff_curv
