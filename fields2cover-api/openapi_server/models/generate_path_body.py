from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.generate_path_settings import GeneratePathSettings
from openapi_server.models.point import Point
from openapi_server import util

from openapi_server.models.generate_path_settings import GeneratePathSettings  # noqa: E501
from openapi_server.models.point import Point  # noqa: E501

class GeneratePathBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _field=None, working_lanes=None, transport_lanes=None, start_end_point=None, settings=None):  # noqa: E501
        """GeneratePathBody - a model defined in OpenAPI

        :param _field: The _field of this GeneratePathBody.  # noqa: E501
        :type _field: str
        :param working_lanes: The working_lanes of this GeneratePathBody.  # noqa: E501
        :type working_lanes: str
        :param transport_lanes: The transport_lanes of this GeneratePathBody.  # noqa: E501
        :type transport_lanes: str
        :param start_end_point: The start_end_point of this GeneratePathBody.  # noqa: E501
        :type start_end_point: Point
        :param settings: The settings of this GeneratePathBody.  # noqa: E501
        :type settings: GeneratePathSettings
        """
        self.openapi_types = {
            '_field': str,
            'working_lanes': str,
            'transport_lanes': str,
            'start_end_point': Point,
            'settings': GeneratePathSettings
        }

        self.attribute_map = {
            '_field': 'field',
            'working_lanes': 'workingLanes',
            'transport_lanes': 'transportLanes',
            'start_end_point': 'startEndPoint',
            'settings': 'settings'
        }

        self.__field = _field
        self._working_lanes = working_lanes
        self._transport_lanes = transport_lanes
        self._start_end_point = start_end_point
        self._settings = settings

    @classmethod
    def from_dict(cls, dikt) -> 'GeneratePathBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The generatePath_body of this GeneratePathBody.  # noqa: E501
        :rtype: GeneratePathBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _field(self) -> str:
        """Gets the _field of this GeneratePathBody.

        GeoJSON data for the field  # noqa: E501

        :return: The _field of this GeneratePathBody.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field: str):
        """Sets the _field of this GeneratePathBody.

        GeoJSON data for the field  # noqa: E501

        :param _field: The _field of this GeneratePathBody.
        :type _field: str
        """
        if _field is None:
            raise ValueError("Invalid value for `_field`, must not be `None`")  # noqa: E501

        self.__field = _field

    @property
    def working_lanes(self) -> str:
        """Gets the working_lanes of this GeneratePathBody.

        Optional GeoJSON data for working lanes  # noqa: E501

        :return: The working_lanes of this GeneratePathBody.
        :rtype: str
        """
        return self._working_lanes

    @working_lanes.setter
    def working_lanes(self, working_lanes: str):
        """Sets the working_lanes of this GeneratePathBody.

        Optional GeoJSON data for working lanes  # noqa: E501

        :param working_lanes: The working_lanes of this GeneratePathBody.
        :type working_lanes: str
        """

        self._working_lanes = working_lanes

    @property
    def transport_lanes(self) -> str:
        """Gets the transport_lanes of this GeneratePathBody.

        Optional GeoJSON data for transport lanes  # noqa: E501

        :return: The transport_lanes of this GeneratePathBody.
        :rtype: str
        """
        return self._transport_lanes

    @transport_lanes.setter
    def transport_lanes(self, transport_lanes: str):
        """Sets the transport_lanes of this GeneratePathBody.

        Optional GeoJSON data for transport lanes  # noqa: E501

        :param transport_lanes: The transport_lanes of this GeneratePathBody.
        :type transport_lanes: str
        """

        self._transport_lanes = transport_lanes

    @property
    def start_end_point(self) -> Point:
        """Gets the start_end_point of this GeneratePathBody.


        :return: The start_end_point of this GeneratePathBody.
        :rtype: Point
        """
        return self._start_end_point

    @start_end_point.setter
    def start_end_point(self, start_end_point: Point):
        """Sets the start_end_point of this GeneratePathBody.


        :param start_end_point: The start_end_point of this GeneratePathBody.
        :type start_end_point: Point
        """

        self._start_end_point = start_end_point

    @property
    def settings(self) -> GeneratePathSettings:
        """Gets the settings of this GeneratePathBody.


        :return: The settings of this GeneratePathBody.
        :rtype: GeneratePathSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings: GeneratePathSettings):
        """Sets the settings of this GeneratePathBody.


        :param settings: The settings of this GeneratePathBody.
        :type settings: GeneratePathSettings
        """

        self._settings = settings
