from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.generate_path_post_request_settings_sorter_settings import GeneratePathPostRequestSettingsSorterSettings
from openapi_server.models.robot_settings import RobotSettings
from openapi_server import util

from openapi_server.models.generate_path_post_request_settings_sorter_settings import GeneratePathPostRequestSettingsSorterSettings  # noqa: E501
from openapi_server.models.robot_settings import RobotSettings  # noqa: E501

class GeneratePathPostRequestSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, robot_settings=None, sorter_settings=None, curves_algorithm=None):  # noqa: E501
        """GeneratePathPostRequestSettings - a model defined in OpenAPI

        :param robot_settings: The robot_settings of this GeneratePathPostRequestSettings.  # noqa: E501
        :type robot_settings: RobotSettings
        :param sorter_settings: The sorter_settings of this GeneratePathPostRequestSettings.  # noqa: E501
        :type sorter_settings: GeneratePathPostRequestSettingsSorterSettings
        :param curves_algorithm: The curves_algorithm of this GeneratePathPostRequestSettings.  # noqa: E501
        :type curves_algorithm: str
        """
        self.openapi_types = {
            'robot_settings': RobotSettings,
            'sorter_settings': GeneratePathPostRequestSettingsSorterSettings,
            'curves_algorithm': str
        }

        self.attribute_map = {
            'robot_settings': 'robotSettings',
            'sorter_settings': 'sorterSettings',
            'curves_algorithm': 'curvesAlgorithm'
        }

        self._robot_settings = robot_settings
        self._sorter_settings = sorter_settings
        self._curves_algorithm = curves_algorithm

    @classmethod
    def from_dict(cls, dikt) -> 'GeneratePathPostRequestSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _generatePath_post_request_settings of this GeneratePathPostRequestSettings.  # noqa: E501
        :rtype: GeneratePathPostRequestSettings
        """
        return util.deserialize_model(dikt, cls)

    @property
    def robot_settings(self) -> RobotSettings:
        """Gets the robot_settings of this GeneratePathPostRequestSettings.


        :return: The robot_settings of this GeneratePathPostRequestSettings.
        :rtype: RobotSettings
        """
        return self._robot_settings

    @robot_settings.setter
    def robot_settings(self, robot_settings: RobotSettings):
        """Sets the robot_settings of this GeneratePathPostRequestSettings.


        :param robot_settings: The robot_settings of this GeneratePathPostRequestSettings.
        :type robot_settings: RobotSettings
        """

        self._robot_settings = robot_settings

    @property
    def sorter_settings(self) -> GeneratePathPostRequestSettingsSorterSettings:
        """Gets the sorter_settings of this GeneratePathPostRequestSettings.


        :return: The sorter_settings of this GeneratePathPostRequestSettings.
        :rtype: GeneratePathPostRequestSettingsSorterSettings
        """
        return self._sorter_settings

    @sorter_settings.setter
    def sorter_settings(self, sorter_settings: GeneratePathPostRequestSettingsSorterSettings):
        """Sets the sorter_settings of this GeneratePathPostRequestSettings.


        :param sorter_settings: The sorter_settings of this GeneratePathPostRequestSettings.
        :type sorter_settings: GeneratePathPostRequestSettingsSorterSettings
        """

        self._sorter_settings = sorter_settings

    @property
    def curves_algorithm(self) -> str:
        """Gets the curves_algorithm of this GeneratePathPostRequestSettings.

        Algorithm to generate curves  # noqa: E501

        :return: The curves_algorithm of this GeneratePathPostRequestSettings.
        :rtype: str
        """
        return self._curves_algorithm

    @curves_algorithm.setter
    def curves_algorithm(self, curves_algorithm: str):
        """Sets the curves_algorithm of this GeneratePathPostRequestSettings.

        Algorithm to generate curves  # noqa: E501

        :param curves_algorithm: The curves_algorithm of this GeneratePathPostRequestSettings.
        :type curves_algorithm: str
        """
        allowed_values = ["dubins", "dubins_cc", "reeds_shepp"]  # noqa: E501
        if curves_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `curves_algorithm` ({0}), must be one of {1}"
                .format(curves_algorithm, allowed_values)
            )

        self._curves_algorithm = curves_algorithm
